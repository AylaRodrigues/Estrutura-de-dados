// Grupo: Ayla Rodrigues, Douglas Mareli, Sofia Kitaeva
// Exercicio 2 - Estrutura de dados

#include <stdio.h>
#include <stdlib.h>
#include <locale.h>

typedef struct arvore{
	int info;
	struct arvore *esq;
	struct arvore *dir;
}arvore;

arvore *LerArvore(FILE *arq, arvore *a){
	char c;
	int num;
	
	fscanf(arq, "%c", &c);
	fscanf(arq, "%d", &num);
	if(num == -1) {
		fscanf(arq, "%c", &c);
		return NULL;
	} else {
		a = (arvore*)malloc(sizeof(arvore));
		a->info = num;
		a->esq = LerArvore(arq, a);
		a->dir = LerArvore(arq, a);
		fscanf(arq, "%c", &c);
		return a;
	}
}

int AlturaArvore(arvore *a)
{
	if (a == NULL)
	{
		return 0;
	}
	else
	{
		int he, hd;
		he=AlturaArvore(a->esq);
		hd=AlturaArvore(a->dir);

		if (he>hd)
		{
			return he+1;
		}
		else
			return hd+1;
	}
}

void ImprimirNivel(arvore *a, int cont, int nivel)//impressao de nivel do no
{
	if (a!= NULL)
	{
		if (cont==nivel)
		{
			printf("%d", a->info);
		}
		else
		{
			ImprimirNivel(a-> esq, cont+1, nivel);
			ImprimirNivel(a-> dir, cont+1, nivel);
		}
	}
}

void ImprimirPreOrdem(arvore *a)//impressao pre ordem
{
	if(a != NULL) 
	{
		printf("%d\n", a->info);
		ImprimirPreOrdem(a->esq);
		ImprimirPreOrdem(a->dir);
	}	
}

void ImprimirEmOrdem(arvore *a)//impressao em ordem
{
	if (a != NULL)
	{
		ImprimirEmOrdem(a->esq);
		printf("%d\n", a->info);
		ImprimirEmOrdem(a->dir);
	}
}				
		
void ImprimirPosOrdem(arvore *a)//impressao pos ordem
{
	if (a != NULL)
	{
		ImprimirPosOrdem(a->esq);
		ImprimirPosOrdem(a->dir);
		printf("%d\n", a->info);
	}
}		

/*void ImprimirEmLargura(arvore *a, int nivel)//impressao pos ordem
{
	if (a != NULL)
	{

		ImprimirEmLargura(a->esq);
		ImprimirEmLargura(a->dir);
		printf("%d\n", a->info);
	}
}	
*/
int Existe(arvore *a, int x)//verificar existencia de um numero x na arvore
{
	if (a==NULL)
	{
		return 0;
	}
	else if (a->info ==x)
	{
		return 1;
	}
	else
	{
		int ret = Existe(a->esq, x);
		if (ret ==1)
		{
			return 1;
			return Existe(a->dir, x);
		}
	}
}

arvore *Destruir(arvore *a)//liberar a memoria da arvore e destrui-la
{
	if (a!=NULL)
	{
		a->esq = Destruir(a->esq);
		a->dir = Destruir(a->dir);
		free(a);
	}
	return NULL;
}

int ContarElementos(arvore *a)//contar quantos elementos tem na arvore, tem que colocar recursiva
{
	if (a == NULL)
	{
		return 0;
	} else {
		return ContarElementos(a->esq) + ContarElementos(a->dir) + 1;
	}	
}

int main() {
	setlocale(LC_ALL, "");
	
	FILE *arq;
	arvore *a;

	arq = fopen("arvore.txt", "rt");
	
	int opcao=0;

	while(opcao!=9)
	{
		printf("O que deseja fazer?\n 1.Ler arvore\n 2.Imprimir arvore\n 3.Verificar existencia de um elemento\n 4.Contar numero de elementos\n 5.Imprimir os nos da arvore\n 6.Verificar balanceamento da arvore\n 7.Verificar se a arvore eh cheia\n 8.Imprimir nivel de um no\n 9.sair\n");
		scanf("%d", &opcao);
		
		if (opcao==1)//leitua da arvore
		{
			a = LerArvore(arq, a);
		}
		else if(opcao==2)//impressao arvore
		{
			int escolha=0;
			printf("Como deseja que seja feita a impressao da arvore?\n 1.Pre-Ordem\n 2.Em-Ordem\n 3.Pos-Ordem\n 4.Em largura\n");
			scanf("%d", &escolha);
			if (escolha==1)
			{
				ImprimirPreOrdem(a);
			}
			else if (escolha==2)
			{
				ImprimirEmOrdem(a);
			}
			else if (escolha ==3)
			{
				ImprimirPosOrdem(a);
			}
			else
			{
				
			}
			
		}
		else if(opcao==3)//verificar existencia
		{
			int x;
			printf("Qual o numero que deseja verificar na arvore?\n");
			scanf("%d", &x);
			x = Existe(a, x);

			if (x==1)
			{
				printf("Esse numero existe na arvore\n");
			}
			else
			{
				printf("Esse numero nao existe na arvore\n");
			}
		}
		else if (opcao==4)//contar quant. elementos
		{
			int numElemento;
			numElemento = ContarElementos(a);
			printf("%d\n\n",numElemento);
		}
		else if(opcao==5)//imprimir nos 
		{
			
		}
		else if(opcao==6)//verificar balanceamento
		{
			
		}
		else if(opcao==7)//verificar se eh cheia
		{
			
		}
		else if(opcao==8)//imprimir nivel de um no
		{
			
		}

	}
		a = Destruir(a);
		printf("O usu√°rio saiu!\n");
		fclose(arq);
	return 0;
}
