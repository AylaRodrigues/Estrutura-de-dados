// Grupo: Ayla Rodrigues, Douglas Mareli, Sofia Kitave
// Exercicio 2 - Estrutura de dados

#include <stdio.h>
#include <stdlib.h>
#include <locale.h>

typedef struct arvore{
	int info;
	struct arvore *esq;
	struct arvore *dir;
}arvore;

arvore *LerArvore(FILE *arq, arvore *a){
	char c;
	int num;
	
	fscanf(arq, "%c", &c);
	fscanf(arq, "%s", &num);
	if(num == -1) {
		fscanf(arq, "%c", &c);
		return NULL;
	} else {
		a = (arvore*)malloc(sizeof(arvore));
		a->info = num;
		printf("%d",a->info);
		a->esq = LerArvore(arq, a);
		a->dir = LerArvore(arq, a);
		fscanf(arq, "%c", &c);
		return a;
	}
}

void ImprimirNivel(arvore *a, int cont, int nivel)//impressao de nivel do no
{
	if (a!= NULL)
	{
		if (cont==nivel)
		{
			printf(%d, a->info);
		}
		else
		{
			ImprimirNivel(a-> esq, cont+1, nivel);
			ImprimirNivel(a-> dir, cont+1, nivel);
		}
	}
}

void ImprimirArvore(arvore *a)//impressao da arvore
{
	int escolha=0;
	if(a != NULL) {

		printf("Como deseja que seja feita a impressao da arvore?\n 1.Pre-Ordem\n 2.Em-Ordem\n 3.Pos-Ordem\n 4.Em largura\n");
		scanf("%d", &escolha);

		if (escolha ==1)
		{
			printf("%d", a->info);
			ImprimirArvore(a->esq);
			ImprimirArvore(a->dir);
		}
		else if (escolha==2)
		{
			ImprimirArvore(a->esq);
			printf("%d", a->info);
			ImprimirArvore(a->dir);
		}
		else if (escolha==3)
		{
			ImprimirArvore(a->esq);
			ImprimirArvore(a->dir);
			printf("%d", a->info);
		}
		else//acho que nao ta 100%
		{
			for (int n = 0; n < count; ++n)
			{
				ImprimirNivel(a, 0, n)
			}
			
		}
	}	
}

int Existe(arvore *a, int x)
{
	if (a==NULL)
	{
		return 0;
	}
	else if (a->info ==x)
	{
		return 1;
	}
	else
	{
		int ret = Existe(a->esq, x);
		if (ret ==1)
		{
			return 1;
			return Existe(a->dir, x);
		}
	}
}

int main() {
	setlocale(LC_ALL, "");
	
	FILE *arq;
	arvore *a;

	arq = fopen("arvore.txt", "rt");
	
	int opcao=0;

	while(opcao!=9)
	{
		printf("O que deseja fazer?\n 1.Ler arvore\n 2.Imprimir arvore\n 3.Verificar existencia de um elemento\n 4.Contar numero de elementos\n 5.Imprimir os nos da arvore\n 6.Verificar balanceamento da arvore\n 7.Verificar se a arvore eh cheia\n 8.Imprimir nivel de um no\n 9.sair\n");
		scanf("%d", &opcao);
		
		if (opcao==1)//leitua da arvore
		{
			a = LerArvore(arq, a);
		}
		else if(opcao==2)//impressao arvore
		{
			ImprimirArvore(a);
			
		}
		else if(opcao==3)//verificar existencia
		{
			int existencia;
			printf("Qual o numero que deseja verificar na arvore?\n");
			scanf("%d", &x);
			existencia =Existe(a, x);
			if (existencia==1)
			{
				printf("Esse numero existe na arvore")
			}
			else
			{
				printf("Esse numero nao existe na arvore")
			}
		}
		else if (opcao==4)//contar quant. elementos
		{
		}
		else if(opcao==5)//imprimir nos 
		{
			
		}
		else if(opcao==6)//verificar balanceamento
		{
			
		}
		else if(opcao==7)//verificar se eh cheia
		{
			
		}
		else if(opcao==8)//imprimir nivel
		{
			int n;
			printf("Qual o nivel que deseja imprimir?\n");
			scanf("%d", &n);
			ImprimirNivel(a, 0, n);
		}

	}
		printf("O usu√°rio saiu!\n");
		fclose(arq);
	return 0;
}

